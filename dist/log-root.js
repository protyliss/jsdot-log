"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const $colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    dim: '\x1b[2m',
    underscore: '\x1b[4m',
    blink: '\x1b[5m',
    reverse: '\x1b[7m',
    hidden: '\x1b[8m',
    black: '\x1b[30m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    bgBlack: '\x1b[40m',
    bgRed: '\x1b[41m',
    bgGreen: '\x1b[42m',
    bgYellow: '\x1b[43m',
    bgBlue: '\x1b[44m',
    bgMagenta: '\x1b[45m',
    bgCyan: '\x1b[46m',
    bgWhite: '\x1b[47m'
};
const { reset } = $colors;
const _colorWrap = /\(([a-z.]+):(.+)\)/g;
const _colorArrow = /^([a-z.]+)=>$/;
class LogRoot {
    constructor(_parent, prefix) {
        this._parent = _parent;
        this._prefix = '';
        if (_parent) {
            if (prefix) {
                if (!Array.isArray(prefix)) {
                    prefix = [prefix];
                }
                this._prefix = '[' + prefix.join('') + ']';
            }
        }
        else {
            this._parent = {
                getPrefix() {
                    return '[' + getTime() + ']';
                }
            };
        }
    }
    log(...messages) {
        console.log(this.getPrefix(), ...messages.map(setColorMap), reset);
    }
    info(...messages) {
        console.info(this.getPrefix(), ...messages.map(setColorMap), reset);
    }
    warn(...messages) {
        console.warn(this.getPrefix(), ...messages.map(setColorMap), reset);
    }
    error(...messages) {
        console.error(this.getPrefix(), ...messages.map(setColorMap), reset);
    }
    group(...messages) {
        console.group(this.getPrefix(), ...messages.map(setColorMap), reset);
    }
    groupEnd() {
        console.groupEnd();
    }
    child(prefix) {
        return new LogRoot(this, prefix);
    }
    getPrefix() {
        return this._parent.getPrefix() + this._prefix;
    }
    title(message) {
        console.log('\n', '\n', message, getLine('=', message.length));
    }
}
exports.LogRoot = LogRoot;
function setColorMap(message) {
    if (typeof message !== 'string') {
        return message;
    }
    const arrowed = message.match(_colorArrow);
    return arrowed ?
        getColors(arrowed[1]) :
        message.replace(_colorWrap, setColor);
}
function setColor(substring, colors, value) {
    return getColors(colors) + value + $colors.reset;
}
function getColors(colors) {
    return colors.split('.').map(getColorMap).join('');
}
function getColorMap(color) {
    return $colors[color] || $colors.reset;
}
const $lines = {};
function getLine(char, size) {
    if (!$lines[char]) {
        $lines[char] = {};
    }
    if (!$lines[char][size]) {
        let line = '';
        while (size-- > 0) {
            line += char;
        }
        $lines[char][size] = '\n' + line + '\n';
    }
    return $lines[char][size];
}
function getTime() {
    const date = new Date;
    return [
        date.getHours(),
        date.getMinutes(),
        date.getSeconds()
    ]
        .map(zerofill)
        .join(':');
}
function zerofill(value) {
    return value < 10 ?
        '0' + value :
        value;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
